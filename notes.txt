FRONT END DEVELOPMENT

- Piece of software that the user can interact with


- Web vs Internet
    - Internet - physical infrastrcture (global network of networks)
    - Web - communication layer that sits on top of the Internet

- Who invented the web?
    - Sir Tim Berners Lee

- Client (browser) -> HTTP Request -> Server (backend)
- Server -> HTTP Response -> Client

- Anatomy of the Web:
    - Client -> Browser -> Piece of software whoes job it is to send requests for information and interpret and display the info in a human freightly way
    - HTTP -> Hyper Text Transfer Protocol -> Standard rules created for sharing information across the Internet
    - Server -> A service tha is listerning for requests and sends back responses

- The DOM is the representation of the html

JS In The Browser

- Manipulate the DOM 
    - querySelector - Selects element from the DOM and then apply manipulations (styling, content, structure)
    - eg. document.querySelector(`element`).style.backgroundColor = `color`
- innerHTML vs textContent
    - innerHTML can alter the entire html markup of an element
    - textContent only alters the text within an element
- querySelectorAll
    - Selects all elements of the same tag to allow manipulations, returns a node array and so requires a loop too apply manipulations to the elements  
        - eg. document.querySelectorAll(".red").forEach(el => el.style.color= "red")
            - this line selects all elements that has the class tag of "red". the forEach loop goes through each element in the node array (el) and applies the desired modification to each of them (el.style.color = "red")


DOM Events
- Event listeners - addEventListener(`event`, callback with code that you want to execute on that event)
    - Click
    - Submit
    - Mouse enter 
    - Mouse leave
    -Load
    e.target -> allow you to grab the element that the event listener on
    e.preventDefault() -> prevents the page from reloading
- eg. document.querySelector("h1"),addEventListener("mouseenter", (e) => {altert("Hi there!")})


Module Bundler

- Package up all scripts and bundle it into one script
- Avoiding importing several indiviual JS scripts
- Allow us to use  `requre` in client-side JS
- E.g. 
    - Webpack
    - Vite
    - Rollout
    - Parcel
    - Watchify - npm Development Package, only needed in production
        - npm init -y
        - npm i -D Watchify
        - create a script in package.json 
        - `"dev": "watchify ./script.js -o bundle.js",`
            - -o means output
        - npm run dev
        - this creates the bundle.js file 
        - import this bundle.js in the html file
            - `<script src="bundle.js"></script>


!! to have the script html import tag in the header, you MUST put `defer` before the src !!


APPLICATION PROGRAMMING INTERFACE (API) - Web services/Server
    - User is the Customer
    - Application is the kitchen
    - API would be the server 
        - Server takes your order 
        - Takes order to kitchen
        - Kitchen gives server your order
        - Server then delivers your order to you
- communcation between one service and another service 
    - can recieve data from one service and use that data in your client 

ASYNCHRONOUS OPERATIONS
    - Operation will happen in the future, but not right now 
    - E.g. fetching data from a server/api 
    - Sometimes, you do not know how long an API will return data back to you
    - Cannot mak javascript wait around for a response - it would block the UI
    - Give JS a function to execute when you finally get a response - CALLBACK 

EVENT LOOP 

PROMISES 
- States
    - pending -> promise has been created and the async function associated with that promise has not succeeded or failed yet
    - fulfilled -> when the async function has succeeded -> `.then()`
    - rejected -> the async function has failed -> `.catch()`
    .then and .catch can chain on the fetch
fetch("api-url")

.then - function you call if the promise is successful
.catch - the function you call if the promise is unsuccessful
.finally - not often used.
